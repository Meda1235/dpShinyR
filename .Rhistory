)
)
),
bs4TabItem(tabName = "multi_variable",
fluidRow(
bs4Card(
title = "Multi Variable Analysis",
# Add multi-variable analysis UI components here
p("Multi-variable analysis components go here."),
width = 12
)
)
),
bs4TabItem(tabName = "missing_values",
fluidRow(
bs4Card(
title = "Analyze Missing Values",
actionButton("analyze_missing_values", "Analyze Missing Values", icon = icon("exclamation-triangle")),
verbatimTextOutput("missing_values_summary"),
width = 12
),
bs4Card(
title = "Imputation Methods",
selectInput("imputation_method", "Choose Imputation Method:",
choices = c("Mean", "Median", "Mode", "Forward Fill", "Linear Interpolation")),
actionButton("apply_imputation", "Apply Imputation", icon = icon("edit")),
width = 12
)
)
)
)
)
)
server <- function(input, output, session) {
# Reactive value to store the uploaded data
data <- reactiveVal(NULL)
# Handle file upload
observeEvent(input$file_input, {
req(input$file_input)
data(read.csv(input$file_input$datapath))
updateSelectInput(session, "column_select", choices = colnames(data()))
})
# Display data preview
output$table_output <- renderDT({
datatable(data())
})
# Analyze missing values
observeEvent(input$analyze_missing_values, {
req(data())
missing_summary <- colSums(is.na(data()))
output$missing_values_summary <- renderPrint({
paste("Number of missing values per column:", paste(missing_summary, collapse = ", "))
})
})
# Apply selected imputation method
observeEvent(input$apply_imputation, {
req(data(), input$column_select, input$imputation_method)
col <- input$column_select
method <- input$imputation_method
# Perform imputation based on selected method
if (method == "Mean") {
data()[[col]][is.na(data()[[col]])] <- mean(data()[[col]], na.rm = TRUE)
} else if (method == "Median") {
data()[[col]][is.na(data()[[col]])] <- median(data()[[col]], na.rm = TRUE)
} else if (method == "Mode") {
mode_val <- names(sort(table(data()[[col]], useNA = "ifany"), decreasing = TRUE)[1])
data()[[col]][is.na(data()[[col]])] <- mode_val
} else if (method == "Forward Fill") {
data()[[col]] <- zoo::na.locf(data()[[col]])
} else if (method == "Linear Interpolation") {
data()[[col]] <- approx(seq_along(data()[[col]]), data()[[col]], method = "linear")$y
}
# Update table output after imputation
output$table_output <- renderDT({
datatable(data())
})
})
# Detect outliers
observeEvent(input$detect_outliers, {
req(input$column_select, data())
col <- input$column_select
threshold <- as.numeric(input$outlier_threshold)
# Detect outliers using Z-score
data_subset <- data()[[col]]
z_scores <- abs(scale(data_subset))
outliers <- which(z_scores > threshold)
# Output outlier summary
output$outlier_summary <- renderText({
if (length(outliers) > 0) {
paste("Detected outliers in column:", col,
"\nOutlier count:", length(outliers),
"\nOutlier indices:", paste(outliers, collapse = ", "))
} else {
"No outliers detected."
}
})
# Display outliers in a table
output$outliers_table <- renderDT({
if (length(outliers) > 0) {
outliers_data <- data()[outliers, ]
# Add a checkbox column for outlier removal
datatable(outliers_data, selection = 'multiple', options = list(pageLength = 5))
} else {
NULL
}
})
# Create boxplot for outliers
output$boxplot <- renderPlotly({
p <- ggplot(data(), aes_string(y = col)) +
geom_boxplot(fill = "lightblue") +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme(axis.text.x = element_blank())
ggplotly(p)
})
})
# Remove outliers
observeEvent(input$remove_outliers, {
req(input$outliers_table_rows_selected)
if (length(input$outliers_table_rows_selected) > 0) {
outliers_indices <- input$outliers_table_rows_selected
data(data()[-outliers_indices, ])
}
})
# Execute Shapiro-Wilk test and hypothesis testing
observeEvent(input$execute_analysis, {
req(input$column_select, data(), input$p_value, input$mean_value)
col <- input$column_select
p_value <- as.numeric(input$p_value)
mean_value <- as.numeric(input$mean_value)
# Debug output
output$debug_output <- renderPrint({
paste("Selected column:", col,
"\nInput p-value:", p_value,
"\nInput mean value:", mean_value,
"\nData:", paste(data()[[col]], collapse = ", "))
})
# Perform Shapiro-Wilk test
shapiro_test <- shapiro.test(data()[[col]])
# Determine if data is normally distributed based on p-value
if (shapiro_test$p.value < p_value) {
output$shapiro_wilk_test_result <- renderText({
paste("Shapiro-Wilk test p-value:", round(shapiro_test$p.value, 10),
"\nConclusion: Data is not normally distributed (reject null hypothesis)")
})
# Perform Wilcoxon test
wilcox_test <- wilcox.test(data()[[col]], mu = mean_value)
output$hypothesis_test_result <- renderText({
paste("Wilcoxon test p-value:", round(wilcox_test$p.value, 10),
ifelse(any(duplicated(data()[[col]])),
"\n(Note: Exact p-value could not be computed due to ties; approximate p-value used)",
""),
"\nConclusion:", ifelse(wilcox_test$p.value < p_value,
"There is a significant difference from the mean",
"There is no significant difference from the mean"))
})
} else {
output$shapiro_wilk_test_result <- renderText({
paste("Shapiro-Wilk test p-value:", round(shapiro_test$p.value, 10),
"\nConclusion: Data is normally distributed (fail to reject null hypothesis)")
})
# Perform t-test
t_test <- t.test(data()[[col]], mu = mean_value)
output$hypothesis_test_result <- renderText({
paste("t-test p-value:", round(t_test$p.value, 10),
"\nConclusion:", ifelse(t_test$p.value < p_value,
"There is a significant difference from the mean",
"There is no significant difference from the mean"))
})
}
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# Reactive value to store the uploaded data
data <- reactiveVal(NULL)
# Handle file upload
observeEvent(input$file_input, {
req(input$file_input)
data(read.csv(input$file_input$datapath))
updateSelectInput(session, "column_select", choices = colnames(data()))
})
# Display data preview
output$table_output <- renderDT({
datatable(data())
})
# Analyze missing values
observeEvent(input$analyze_missing_values, {
req(data())
missing_summary <- colSums(is.na(data()))
output$missing_values_summary <- renderPrint({
paste("Number of missing values per column:", paste(missing_summary, collapse = ", "))
})
})
# Apply selected imputation method
observeEvent(input$apply_imputation, {
req(data(), input$column_select, input$imputation_method)
col <- input$column_select
method <- input$imputation_method
# Perform imputation based on selected method
if (method == "Mean") {
data()[[col]][is.na(data()[[col]])] <- mean(data()[[col]], na.rm = TRUE)
} else if (method == "Median") {
data()[[col]][is.na(data()[[col]])] <- median(data()[[col]], na.rm = TRUE)
} else if (method == "Mode") {
mode_val <- names(sort(table(data()[[col]], useNA = "ifany"), decreasing = TRUE)[1])
data()[[col]][is.na(data()[[col]])] <- mode_val
} else if (method == "Forward Fill") {
data()[[col]] <- zoo::na.locf(data()[[col]])
} else if (method == "Linear Interpolation") {
data()[[col]] <- approx(seq_along(data()[[col]]), data()[[col]], method = "linear")$y
}
# Update table output after imputation
output$table_output <- renderDT({
datatable(data())
})
})
# Detect outliers
observeEvent(input$detect_outliers, {
req(input$column_select, data())
col <- input$column_select
threshold <- as.numeric(input$outlier_threshold)
# Detect outliers using Z-score
data_subset <- data()[[col]]
z_scores <- abs(scale(data_subset))
outliers <- which(z_scores > threshold)
# Output outlier summary
output$outlier_summary <- renderText({
if (length(outliers) > 0) {
paste("Detected outliers in column:", col,
"\nOutlier count:", length(outliers),
"\nOutlier indices:", paste(outliers, collapse = ", "))
} else {
"No outliers detected."
}
})
# Display outliers in a table
output$outliers_table <- renderDT({
if (length(outliers) > 0) {
outliers_data <- data()[outliers, ]
# Add a checkbox column for outlier removal
datatable(outliers_data, selection = 'multiple', options = list(pageLength = 5))
} else {
NULL
}
})
# Create boxplot for outliers
output$boxplot <- renderPlotly({
p <- ggplot(data(), aes_string(y = col)) +
geom_boxplot(fill = "lightblue") +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme(axis.text.x = element_blank())
ggplotly(p)
})
})
# Remove outliers
observeEvent(input$remove_outliers, {
req(input$outliers_table_rows_selected)
if (length(input$outliers_table_rows_selected) > 0) {
outliers_indices <- input$outliers_table_rows_selected
data(data()[-outliers_indices, ])
}
})
# Execute Shapiro-Wilk test and hypothesis testing
observeEvent(input$execute_analysis, {
req(input$column_select, data(), input$p_value, input$mean_value)
col <- input$column_select
p_value <- as.numeric(input$p_value)
mean_value <- as.numeric(input$mean_value)
# Debug output
output$debug_output <- renderPrint({
paste("Selected column:", col,
"\nInput p-value:", p_value,
"\nInput mean value:", mean_value,
"\nData:", paste(data()[[col]], collapse = ", "))
})
# Perform Shapiro-Wilk test
shapiro_test <- shapiro.test(data()[[col]])
# Determine if data is normally distributed based on p-value
if (shapiro_test$p.value < p_value) {
output$shapiro_wilk_test_result <- renderText({
paste("Shapiro-Wilk test p-value:", round(shapiro_test$p.value, 10),
"\nConclusion: Data is not normally distributed (reject null hypothesis)")
})
# Perform Wilcoxon test
wilcox_test <- wilcox.test(data()[[col]], mu = mean_value)
output$hypothesis_test_result <- renderText({
paste("Wilcoxon test p-value:", round(wilcox_test$p.value, 10),
ifelse(any(duplicated(data()[[col]])),
"\n(Note: Exact p-value could not be computed due to ties; approximate p-value used)",
""),
"\nConclusion:", ifelse(wilcox_test$p.value < p_value,
"There is a significant difference from the mean",
"There is no significant difference from the mean"))
})
} else {
output$shapiro_wilk_test_result <- renderText({
paste("Shapiro-Wilk test p-value:", round(shapiro_test$p.value, 10),
"\nConclusion: Data is normally distributed (fail to reject null hypothesis)")
})
# Perform t-test
t_test <- t.test(data()[[col]], mu = mean_value)
output$hypothesis_test_result <- renderText({
paste("t-test p-value:", round(t_test$p.value, 10),
"\nConclusion:", ifelse(t_test$p.value < p_value,
"There is a significant difference from the mean",
"There is no significant difference from the mean"))
})
}
})
}
shinyApp(ui = ui, server = server)
ui <- bs4DashPage(
title = "bs4Dash File Upload Example",
header = bs4DashNavbar(),
sidebar = bs4DashSidebar(
bs4SidebarMenu(
bs4SidebarMenuItem("Single Variable", tabName = "single_variable", icon = icon("chart-line")),
bs4SidebarMenuItem("Multi Variable", tabName = "multi_variable", icon = icon("chart-bar"))
)
),
body = bs4DashBody(
bs4TabItems(
bs4TabItem(tabName = "single_variable",
fluidRow(
bs4Card(
title = "Upload File",
fileInput("file_input", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")),
width = 12
),
bs4Card(
title = "Data Preview",
DTOutput("table_output"),
width = 12
),
bs4Card(
title = "Select Column for Analysis",
selectInput("column_select", "Select Column", choices = NULL),
width = 12
),
bs4Card(
title = "Analyze Missing Values",
actionButton("analyze_missing_values", "Analyze Missing Values", icon = icon("search")),
verbatimTextOutput("missing_values_summary"),
width = 12
),
bs4Card(
title = "Outlier Detection",
fluidRow(
column(width = 8,
textInput("outlier_threshold", "Outlier Detection Threshold (Z-score):", value = "3"),
actionButton("detect_outliers", "Detect Outliers", icon = icon("search")),
verbatimTextOutput("outlier_summary"),
DTOutput("outliers_table"),
actionButton("remove_outliers", "Remove Selected Outliers", icon = icon("trash-alt"))
),
column(width = 4,
box(width = 12,
title = "Boxplot of Selected Column",
plotlyOutput("boxplot")
)
)
),
width = 12
),
bs4Card(
title = "Shapiro-Wilk Test for Normality",
textInput("p_value", "Enter p-value:", value = "0.05"),
textInput("mean_value", "Enter the mean value for hypothesis testing:", value = "0"),
actionButton("execute_analysis", "Execute Shapiro-Wilk Test and Hypothesis Testing", icon = icon("play")),
verbatimTextOutput("shapiro_wilk_test_result"),
verbatimTextOutput("hypothesis_test_result"),
verbatimTextOutput("debug_output"),
width = 12
)
)
),
bs4TabItem(tabName = "multi_variable",
fluidRow(
bs4Card(
title = "Multi Variable Analysis",
p("Multi-variable analysis components go here."),
width = 12
)
)
)
)
)
)
server <- function(input, output, session) {
data <- reactiveVal(NULL)
# Handle file upload
observeEvent(input$file_input, {
req(input$file_input)
data(read.csv(input$file_input$datapath))
updateSelectInput(session, "column_select", choices = colnames(data()))
})
# Display data preview
output$table_output <- renderDT({
datatable(data())
})
# Analyze missing values
observeEvent(input$analyze_missing_values, {
req(data())
missing_summary <- colSums(is.na(data()))
output$missing_values_summary <- renderPrint({
paste("Number of missing values per column:", paste(missing_summary, collapse = ", "))
})
})
# Detect outliers
observeEvent(input$detect_outliers, {
req(input$column_select, data())
col <- input$column_select
threshold <- as.numeric(input$outlier_threshold)
# Detect outliers using Z-score
data_subset <- data()[[col]]
z_scores <- abs(scale(data_subset))
outliers <- which(z_scores > threshold)
# Output outlier summary
output$outlier_summary <- renderText({
if (length(outliers) > 0) {
paste("Detected outliers in column:", col,
"\nOutlier count:", length(outliers),
"\nOutlier indices:", paste(outliers, collapse = ", "))
} else {
"No outliers detected."
}
})
# Display outliers in a table
output$outliers_table <- renderDT({
if (length(outliers) > 0) {
outliers_data <- data()[outliers, ]
datatable(outliers_data, selection = 'multiple', options = list(pageLength = 5))
} else {
NULL
}
})
# Create boxplot for outliers
output$boxplot <- renderPlotly({
p <- ggplot(data(), aes_string(y = col)) +
geom_boxplot(fill = "lightblue") +
labs(title = paste("Boxplot of", col),
x = NULL, y = col) +
theme(axis.text.x = element_blank())
ggplotly(p)
})
})
# Remove outliers
observeEvent(input$remove_outliers, {
req(input$outliers_table_rows_selected)
if (length(input$outliers_table_rows_selected) > 0) {
outliers_indices <- input$outliers_table_rows_selected
data(data()[-outliers_indices, ])
}
})
# Execute Shapiro-Wilk test and hypothesis testing
observeEvent(input$execute_analysis, {
req(input$column_select, data(), input$p_value, input$mean_value)
col <- input$column_select
p_value <- as.numeric(input$p_value)
mean_value <- as.numeric(input$mean_value)
# Debug output
output$debug_output <- renderPrint({
paste("Selected column:", col,
"\nInput p-value:", p_value,
"\nInput mean value:", mean_value,
"\nData:", paste(data()[[col]], collapse = ", "))
})
# Perform Shapiro-Wilk test
shapiro_test <- shapiro.test(data()[[col]])
# Determine if data is normally distributed based on p-value
if (shapiro_test$p.value < p_value) {
output$shapiro_wilk_test_result <- renderText({
paste("Shapiro-Wilk test p-value:", round(shapiro_test$p.value, 10),
"\nConclusion: Data is not normally distributed (reject null hypothesis)")
})
# Perform Wilcoxon test
wilcox_test <- wilcox.test(data()[[col]], mu = mean_value)
output$hypothesis_test_result <- renderText({
paste("Wilcoxon test p-value:", round(wilcox_test$p.value, 10),
ifelse(any(duplicated(data()[[col]])),
"\n(Note: Exact p-value could not be computed due to ties; approximate p-value used)",
""),
"\nConclusion:", ifelse(wilcox_test$p.value < p_value,
"There is a significant difference from the mean",
"There is no significant difference from the mean"))
})
} else {
output$shapiro_wilk_test_result <- renderText({
paste("Shapiro-Wilk test p-value:", round(shapiro_test$p.value, 10),
"\nConclusion: Data is normally distributed (fail to reject null hypothesis)")
})
# Perform t-test
t_test <- t.test(data()[[col]], mu = mean_value)
output$hypothesis_test_result <- renderText({
paste("t-test p-value:", round(t_test$p.value, 10),
"\nConclusion:", ifelse(t_test$p.value < p_value,
"There is a significant difference from the mean",
"There is no significant difference from the mean"))
})
}
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shiny::runApp('dpdp')
runApp('dpdp')
